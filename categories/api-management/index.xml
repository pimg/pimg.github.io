<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>api-management on API&#39;s you can trust</title>
    <link>http://pimg.github.io/categories/api-management/</link>
    <description>Recent content in api-management on API&#39;s you can trust</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 Mar 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://pimg.github.io/categories/api-management/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>3scale policy development – part 2 generate a policy scaffold</title>
      <link>http://pimg.github.io/posts/2019/03/3scale-policy-development-part-2-generate-a-policy-scaffold/</link>
      <pubDate>Fri, 22 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://pimg.github.io/posts/2019/03/3scale-policy-development-part-2-generate-a-policy-scaffold/</guid>
      <description>In first part of our multi-part blog series about 3scale policy development we looked into the setup of a development environment. Now we have a functioning development environment we can start the actual development of the 3scale policy. In this part we will take a look and use the scaffolding utility provided by APIcast to generate a policy scaffold.
The first thing we are going to do is create a new git branch of the APIcast source we have cloned in the previous part.</description>
    </item>
    
    <item>
      <title>3scale policy development - part 1 setting up a development environment</title>
      <link>http://pimg.github.io/posts/2019/03/3scale-policy-development-part-1-setting-up-a-development-environment/</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://pimg.github.io/posts/2019/03/3scale-policy-development-part-1-setting-up-a-development-environment/</guid>
      <description>3scale policy development - part 1 setting up a development environment In this multi part blog series we are going to dive into the development, testing and deployment of a custom 3scale APIcast policy. In this initial part we are going to setup a development environment so we can actually start the development of our policy.
But before we begin, let’s first take a look what a 3scale APIcast policy is.</description>
    </item>
    
    <item>
      <title>Authenticating a JMS consumer with 3Scale, Camel and ActiveMQ</title>
      <link>http://pimg.github.io/posts/2018/03/authenticating-a-jms-consumer-with-3scale-camel-and-activemq/</link>
      <pubDate>Sat, 10 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://pimg.github.io/posts/2018/03/authenticating-a-jms-consumer-with-3scale-camel-and-activemq/</guid>
      <description>3Scale is an API Management platform used for authenticating an throttleing API calls among many, many other things. Now when thinking of API’s most people think of RESTfull API’s these days. And altough 3Scale primarily targets RESTfull API’s it is also possible to use other types of API’s as this blog will demonstrate. In this post we will use a Camel JMS subscriber in combination with ActiveMQ and authenticate requests against the 3Scale API Management platform.</description>
    </item>
    
  </channel>
</rss>